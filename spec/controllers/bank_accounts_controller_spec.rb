require 'rails_helper'
require 'faker'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BankAccountsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # BankAccount. As you add validations to BankAccount, be sure to
  # adjust the attributes here as well.
  # company = Factory(:company, title: 'New company')
  # branch = Factory(:branch, name: 'New branch')

  let(:valid_attributes) {
    { opening_date: Faker::Date.between(5.year.ago, Date.today),
      status: Random.rand(0...5),
      comment: Faker::Lorem.sentence,
      branch_id: 1,
      company_id: 1 }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BankAccountsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET index' do
    it 'assigns all bank_accounts as @bank_accounts' do
      puts valid_attributes.to_yaml
      bank_account = BankAccount.create! valid_attributes
      puts bank_account.errors.full_messages
      get :index, {}, valid_session
      expect(assigns(:bank_accounts)).to eq([bank_account])
    end
  end

  describe "GET show" do
    it "assigns the requested bank_account as @bank_account" do
      bank_account = BankAccount.create! valid_attributes
      get :show, {:id => bank_account.to_param}, valid_session
      expect(assigns(:bank_account)).to eq(bank_account)
    end
  end

  describe "GET new" do
    it "assigns a new bank_account as @bank_account" do
      get :new, {}, valid_session
      expect(assigns(:bank_account)).to be_a_new(BankAccount)
    end
  end

  describe "GET edit" do
    it "assigns the requested bank_account as @bank_account" do
      bank_account = BankAccount.create! valid_attributes
      get :edit, {:id => bank_account.to_param}, valid_session
      expect(assigns(:bank_account)).to eq(bank_account)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new BankAccount" do
        expect {
          post :create, {:bank_account => valid_attributes}, valid_session
        }.to change(BankAccount, :count).by(1)
      end

      it "assigns a newly created bank_account as @bank_account" do
        post :create, {:bank_account => valid_attributes}, valid_session
        expect(assigns(:bank_account)).to be_a(BankAccount)
        expect(assigns(:bank_account)).to be_persisted
      end

      it "redirects to the created bank_account" do
        post :create, {:bank_account => valid_attributes}, valid_session
        expect(response).to redirect_to(BankAccount.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved bank_account as @bank_account" do
        post :create, {:bank_account => invalid_attributes}, valid_session
        expect(assigns(:bank_account)).to be_a_new(BankAccount)
      end

      it "re-renders the 'new' template" do
        post :create, {:bank_account => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      let(:new_attributes) {
        FactoryGirl.build(:bank_account,
                          opening_date:    Faker::Date.between(5.year.ago, Date.today),
                          status:          Random.rand(0...5),
                          comment:         Faker::Lorem.sentence,
                          branch_id:       Random.rand(1...20),
                          company_id:      Random.rand(1...20))
      }

      it "updates the requested bank_account" do
        bank_account = BankAccount.create! valid_attributes
        put :update, {:id => bank_account.to_param, :bank_account => new_attributes}, valid_session
        bank_account.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested bank_account as @bank_account" do
        bank_account = BankAccount.create! valid_attributes
        put :update, {:id => bank_account.to_param, :bank_account => valid_attributes}, valid_session
        expect(assigns(:bank_account)).to eq(bank_account)
      end

      it "redirects to the bank_account" do
        bank_account = BankAccount.create! valid_attributes
        put :update, {:id => bank_account.to_param, :bank_account => valid_attributes}, valid_session
        expect(response).to redirect_to(bank_account)
      end
    end

    describe "with invalid params" do
      it "assigns the bank_account as @bank_account" do
        bank_account = BankAccount.create! valid_attributes
        put :update, {:id => bank_account.to_param, :bank_account => invalid_attributes}, valid_session
        expect(assigns(:bank_account)).to eq(bank_account)
      end

      it "re-renders the 'edit' template" do
        bank_account = BankAccount.create! valid_attributes
        put :update, {:id => bank_account.to_param, :bank_account => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested bank_account" do
      bank_account = BankAccount.create! valid_attributes
      expect {
        delete :destroy, {:id => bank_account.to_param}, valid_session
      }.to change(BankAccount, :count).by(-1)
    end

    it "redirects to the bank_accounts list" do
      bank_account = BankAccount.create! valid_attributes
      delete :destroy, {:id => bank_account.to_param}, valid_session
      expect(response).to redirect_to(bank_accounts_url)
    end
  end

end
